#!/bin/bash -ex
set -o pipefail

source ../utils.sh

LDAP_ADMIN_PASSWORD=ldapsecret
LDAP_CONTAINER_NAME=ldap-server

test_ldap_connect() {
    docker exec -it $LDAP_CONTAINER_NAME bash -c "ldapsearch -x -h localhost -b dc=example,dc=org -D cn=admin,dc=example,dc=org -w admin '(objectClass=user)'"
}

main() {
#  enable_ldap_sync
  server_up
  sleep 3
#  wait_for_server
  init_ldap_server
  init_ldap_sync
  init_authn_ldap
}

enable_ldap_sync() {
# Enable LDAP sync service
  master_pod_name=$(get_master_pod_name)
  $cli exec $master_pod_name bash -c "
    rm /etc/service/conjur/ldap-sync/down
    sv start conjur/ldap-sync
  "
}

server_up() {
#    -e LDAP_TLS="true" \
#    -e LDAP_TLS_VERIFY_CLIENT=try \
#    -e LDAP_TLS_CA_CRT_FILENAME="ca-chain.crt" \
#    -e LDAP_TLS_ENFORCE="true" \
  docker run -d \
    --name $LDAP_CONTAINER_NAME \
    --label role=ldap_server \
    --restart always \
    -e LDAP_ADMIN_PASSWORD=$LDAP_ADMIN_PASSWORD \
    -p "389:389" \
    -p "636:636" \
    osixia/openldap
}

wait_for_server() {
  for i in {1..60}; do
    if ! test_ldap_connect; then
        echo "Waiting for OpenLDAP to start"
     else
        break
    fi
    sleep 1
  done
}

init_ldap_server() {
# Load the LDAP users and groups into OpenLDAP
  docker exec $LDAP_CONTAINER_NAME bash -c "mkdir /opt/ldap"
  docker cp ./files/ldap/ $LDAP_CONTAINER_NAME:/opt
  docker exec $LDAP_CONTAINER_NAME bash -c "
    ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f /opt/ldap/disable_anon_frontend.ldif
    ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f /opt/ldap//disable_anon_backend.ldif
    ldapadd -Z -x -D cn=admin,dc=example,dc=org -w $LDAP_ADMIN_PASSWORD -f /opt/ldap/test-ldap_users.ldif
    ldapadd -Z -x -D cn=admin,dc=example,dc=org -w $LDAP_ADMIN_PASSWORD -f /opt/ldap//test-ldap_groups.ldif
  "
}

init_ldap_sync() {
  conjur_cli_pod=$(get_conjur_cli_pod_name)
  $cli cp ./policies/ $conjur_cli_pod:/policy 
  $cli exec $conjur_cli_pod -- conjur policy load root /policy/01_root.yml

# Load policy for LDAP sync
  $cli exec $conjur_cli_pod -- conjur policy load conjur/ldap-sync /policy/02_ldap_sync.yml

# Store the LDAP sync bind password and cert
  $cli exec $conjur_cli_pod -- conjur variable values add conjur/ldap-sync/bind-password/default $LDAP_ADMIN_PASSWORD
  cat certs/ca.crt | $cli exec -it $conjur_cli_pod -- conjur variable values add conjur/ldap-sync/tls-ca-cert/default

# Generate sync policy
  $cli exec $conjur_cli_pod -- bash -c "conjur ldap-sync policy show | tail -n +2 > ./policy/ldap-sync-default.yml"
  $cli exec $conjur_cli_pod -- conjur policy load root /policy/ldap-sync-default.yml
}

init_authn_ldap() {
# Load policy for authn LDAP
  $cli exec $conjur_cli_pod -- conjur policy load conjur/authn-ldap /policy/03_authn_ldap.yml
  $cli exec $conjur_cli_pod -- conjur policy load root /policy/04_authn_ldap_entitlements.yml

# Store the LDAP bind password and CA cert chain
  $cli exec $conjur_cli_pod -- conjur variable values add conjur/authn-ldap/ldap-server/bind-password $LDAP_ADMIN_PASSWORD
  
  cat certs/ca.crt | $cli exec -it $conjur_cli_pod -- conjur variable values add conjur/authn-ldap/ldap-server/tls-ca-cert

}

main "$@"
