#!/bin/bash

source ../config/cluster.config
source ../config/openshift.config

# This script deletes running instances and brings up 
#   initialized Conjur Master & CLI nodes
#   and leaves the user logged into the CLI as the admin user

#################
main() {
  ./stop
  sleep 5
  master_up
  follower_up
  cli_up
  load_demo_policy
  ./exec-into-cli.sh
}

#################
master_up() {
  # Bring up Conjur Master node
  docker run -d \
    --name $CONJUR_MASTER_CONTAINER_NAME \
    --label role=conjur_node \
    -p "$CONJUR_MASTER_PORT:443" \
    -p "$CONJUR_MASTER_PGSYNC_PORT:5432" \
    -p "$CONJUR_MASTER_PGAUDIT_PORT:1999" \
    --restart always \
    --security-opt seccomp:unconfined \
    $CONJUR_APPLIANCE_IMAGE 

  # Configure Conjur Master node
  echo "Configuring Conjur master..."
  docker exec $CONJUR_MASTER_CONTAINER_NAME \
                evoke configure master     \
                -h $CONJUR_MASTER_HOST_NAME \
                -p $CONJUR_ADMIN_PASSWORD \
		--master-altnames "$MASTER_ALTNAMES" \
		--follower-altnames "$FOLLOWER_ALTNAMES" \
                $CONJUR_ACCOUNT

  mkdir -p $CACHE_DIR
  echo "Caching Conjur master cert ..."
  rm -f $CONJUR_CERT_FILE
  docker cp -L $CONJUR_MASTER_CONTAINER_NAME:/opt/conjur/etc/ssl/conjur.pem $CONJUR_CERT_FILE

  echo "Caching Conjur Follower seed files..."
  rm -f $FOLLOWER_SEED_FILE
  docker exec $CONJUR_MASTER_CONTAINER_NAME evoke seed follower conjur-follower > $FOLLOWER_SEED_FILE

  echo "Initializing Conjur K8s authenticator service..."
  docker exec -it $CONJUR_MASTER_CONTAINER_NAME chpst -u conjur conjur-plugin-service possum rake authn_k8s:ca_init["conjur/authn-k8s/$AUTHENTICATOR_ID"]
}

############################
follower_up() {
  # Bring up Conjur Follower node
  docker run -d \
    --name $CONJUR_FOLLOWER_CONTAINER_NAME \
    --label role=conjur_node \
    -p "$CONJUR_FOLLOWER_PORT:443" \
    --restart always \
    --security-opt seccomp:unconfined \
    $CONJUR_APPLIANCE_IMAGE

  if [[ $NO_DNS ]]; then
    # add entry to follower's /etc/hosts so $CONJUR_MASTER_HOST_NAME resolves
    docker exec -it $CONJUR_FOLLOWER_CONTAINER_NAME \
	bash -c "echo \"$CONJUR_MASTER_HOST_IP $CONJUR_MASTER_HOST_NAME\" >> /etc/hosts"
  fi

  echo "Initializing Conjur Follower"
  docker cp $FOLLOWER_SEED_FILE \
		$CONJUR_FOLLOWER_CONTAINER_NAME:/tmp/follower-seed.tar
  docker exec $CONJUR_FOLLOWER_CONTAINER_NAME \
		evoke unpack seed /tmp/follower-seed.tar
  docker exec $CONJUR_FOLLOWER_CONTAINER_NAME \
		evoke configure follower -p $CONJUR_MASTER_PORT
}

#################
cli_up() {

  # Bring up CLI node
  # If docker-compose installed, replace "docker run..." 
  #   with "docker-compose up -d cli"
  docker run -d \
    --name $CLI_CONTAINER_NAME \
    --label role=cli \
    --restart always \
    --security-opt seccomp:unconfined \
    --add-host "$CONJUR_MASTER_HOST_NAME:$CONJUR_MASTER_HOST_IP" \
    --entrypoint sh \
    $CLI_IMAGE_NAME \
    -c "sleep infinity"

  # Initialize connection to service (create .conjurrc and conjur-xx.pem cert)
  docker exec $CLI_CONTAINER_NAME \
    bash -c "echo yes | conjur init -u $CONJUR_APPLIANCE_URL -a $CONJUR_ACCOUNT"

  # Login as admin
  docker exec $CLI_CONTAINER_NAME \
    conjur authn login -u admin -p $CONJUR_ADMIN_PASSWORD
}

load_demo_policy() {
  # Copy policy into CLI and load it
  docker exec $CLI_CONTAINER_NAME mkdir -p /policy
  docker cp ./demo-policy.yml $CLI_CONTAINER_NAME:/policy/demo-policy.yml
  docker exec $CLI_CONTAINER_NAME \
    conjur policy load root /policy/demo-policy.yml
  docker exec $CLI_CONTAINER_NAME \
    conjur variable values add secrets/db-username "This-is-the-DB-username"
  docker exec $CLI_CONTAINER_NAME bash -c \
    "conjur variable values add secrets/db-password $(openssl rand -hex 12)"
}

main "$@"
